#!/bin/env python3
import os
import sys
import click
import datetime


# Notes on PETSc:
#   1. hpddm needs -fext-numeric-literals
#      Ref: https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Dialect-Options.html
#      Change the dialect from c++11 to gnu++11 can fix this.
#      See ARG CXX_DIALECT_HACK if this is needed
#
#   2. There is an error when build libpng with optiong '-g3'
#      Ref:
#        + https://github.com/glennrp/libpng/issues/254
#        . https://gitlab.com/petsc/petsc/-/issues/1265
#
#   3. Pragmatic cannot be built with 64-bit integers
#

SLEPC_IN_PETSC = True

def get_petsc_opts(int_type, complex=False, debug=False, mkl=False):

    common_pkgs = [
        # "bamg",
        "ctetgen",
        # "egads", "exodusii",
        "fftw",
        "hpddm",
        # "ks", "libceed",
        "libpng",
        "mmg",
        # "muparser", "opencascade",
        "p4est",
        "parmmg",
        "triangle",
        "tetgen",
    ]

    if SLEPC_IN_PETSC:
        common_pkgs.append("slepc")

    debug_map = {
        "debug": [],
        "nondebug": []
    }

    int_type_map = {
        "int32": ["pragmatic"],
        "int64": ["mumps", "scalapack"]
    }

    field_map = {
        "real": [],
        "complex": []
    }

    if int_type not in int_type_map.keys():
        raise "Int type {int_type} not support. Must be in int_type_map.keys()!"

    pkgs = []
    pkgs += common_pkgs
    pkgs += int_type_map[int_type]
    pkgs += field_map["real" if not complex else "complex"]
    pkgs += debug_map["debug" if debug else "nondebug"]

    opts = ["--download-" + pkg for pkg in pkgs]

    if mkl:
        opts += [
            "--with-mkl_pardiso-dir=/opt/intel/oneapi/mkl/latest",
            "--with-mkl_cpardiso-dir=/opt/intel/oneapi/mkl/latest"
        ]

    return " \\\n    ".join(opts)


def get_firedrake_opts(int_type, complex=False, debug=False, mkl=False):
    common_opts = [
        "--no-package-manager",
        "--disable-ssh",
        "--documentation-dependencies",
    ]
    if not SLEPC_IN_PETSC:
        common_opts.append("--slepc")

    debug_map = {
        "debug": [],
        "nondebug": ["--remove-build-files"] if not SLEPC_IN_PETSC else []
    }

    int_type_map = {
        "int32": [],
        "int64": ["--petsc-int-type int64"],
    }

    field_map = {
        "real": [],
        "complex": ["--complex"],
    }

    if int_type not in int_type_map.keys():
        raise "Int type {int_type} not in int_type_map.keys()!"


    opts = []
    opts += common_opts
    opts += int_type_map[int_type]
    opts += field_map["real" if not complex else "complex"]
    opts += debug_map["debug" if debug else "nondebug"]

    if mkl:
        opts += ["--with-blas=/opt/intel/oneapi/mkl/latest"]

    return " \\\n    ".join(opts)


def get_version_string(int_type, complex=False, debug=False, mkl=False):
    return (("complex-" if complex else "real-") +
            int_type +
            ("-mkl" if mkl else "") +
            ("-debug" if debug else ""))


install_script_url = (
    "https://raw.githubusercontent.com/firedrakeproject"
    "/firedrake/master/scripts/firedrake-install"
)


def get_bash_content(int_type, complex=False, debug=False, mkl=False):
    version = get_version_string(int_type, complex, debug, mkl)
    petsc_opts = get_petsc_opts(int_type, complex=complex, debug=debug, mkl=mkl)
    firedrake_opts = get_firedrake_opts(int_type, complex=complex, debug=debug, mkl=mkl)

    path = "$HOME/firedrake"

    content = f"""\
#!/bin/bash
# === This file is generated by build ({datetime.datetime.now().date()}) ===
#
# NOTES: You may need to delete the option '--disable-manager' below
#
# $ bash firedrake-{version}.sh

set -e
SCRIPT_PATH=$(readlink -f $0)

# TODO: check and intall mkl if necessary
# # Install mkl
# wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \\
#     | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
#
# echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] \\
#     https://apt.repos.intel.com/oneapi all main" \\
#     | sudo tee /etc/apt/sources.list.d/oneAPI.list
#
# sudo apt update
# sudo apt install intel-oneapi-mkl  intel-oneapi-mkl-devel

echo "Install firedrake-{version}"

mkdir -p {path}
pushd {path}

curl -O {install_script_url}
"""

    def write_files(file):
        with open(os.path.join("petsc", file)) as f:
            file_content = f.readlines()
        return f"""\ncat > {file} <<'EOF'\n{"".join(file_content).strip()}\nEOF\n"""


    sed = []
    mv_files = []

    if debug:
        sed.append(r"'s/\(--with-debugging=\)0/\11/g'")

    if mkl:
        mkl_patch_file = "petsc4py-mkl.patch"
        mv_files.append(mkl_patch_file)
        content += write_files(mkl_patch_file)

        sed.append(r"'s/\({0}\/lib\)/\1\/intel64/g'")
        sed.append(r"'s/\(.*\)\(with directory(.petsc.):.*\)/"\
                   r"\1\2\n\1\1check_output([\"git\", \"apply\", \"..\/..\/..\/" + mkl_patch_file + r"\"])/'")

        # for hpddm with mkl
        sed.append(r"'s/\(.*\)\(--C\)\(FLAGS=-I{}\/include\)\(.*\)/\1\2\3\4\n\1\2XX\3\4/'")

    install_slepc4py = ""
    remove_build_files = ""
    if SLEPC_IN_PETSC:
        slepc4py_file = "slepc4py-install.sh"
        mv_files.append(slepc4py_file)
        install_slepc4py = f"bash {slepc4py_file}"
        content += write_files(slepc4py_file)

        if not debug:
            rbf_file = "remove_build_files.py"
            remove_build_files = f"python {rbf_file}"
            content += write_files(rbf_file)
            mv_files.append(rbf_file)
    else:
        # for install slepc with hpddm if we install slepc by firedrake.
        sed.append(r"'s/\(check_call(\[python, \"\.\/configure\"\)\(\])\)/\1, \"--download-hpddm\"\2/g'")

    if len(sed) > 0:
        sed = " \\\n    ".join([" ".join(["-e", _]) for _ in sed])

    content += f"""
# Modify firedrake-install file for debug/mkl/hpddm
sed -i.bak \\
    {sed} \\
    firedrake-install

PETSC_CONFIGURE_OPTIONS="{petsc_opts}" \\
python3 firedrake-install {firedrake_opts} \\
    --venv-name {version}

source {version}/bin/activate
{install_slepc4py}
{remove_build_files}
pip install jupyterlab ipyparallel ipywidgets \\
            mpltools meshio gmsh scipy pyyaml pandas

# move the install script to {version} fold for backup
cp $SCRIPT_PATH {version}
mkdir -p {version}/install_script
mv firedrake-install firedrake-install.bak firedrake-install.log \\
    {" ".join(mv_files)} {version}/install_script

echo "Firedrake {version} installed in {path}/{version}"
"""

    return content


def get_dockerfile_content(int_type, complex=False, debug=False, mkl=False):
    version = get_version_string(int_type, complex, debug, mkl)
    petsc_opts = get_petsc_opts(int_type, complex=complex, debug=debug, mkl=mkl)
    firedrake_opts = get_firedrake_opts(int_type, complex=complex, debug=debug, mkl=mkl)


    clean_pip_cached_cmd = "rm -rf /home/firedrake/.cached/pip"

    env = "env" + ("-mkl" if mkl else "")

    content = f"""\
# === This file is generated by build ({datetime.datetime.now().date()}) ===
#
# DockerFile for firedrake
# Based on https://github.com/firedrakeproject/firedrake/blob/master/docker
#
# build cmd:
#
# $ docker build -f Dockerfile.{version} .
# $ docker build -f Dockerfile.{version} --tag lrtfm/firedrake:{version} .

FROM lrtfm/firedrake:{env}

# This DockerFile is looked after by
MAINTAINER Zongze Yang <yangzongze@gmail.com>

USER firedrake
WORKDIR /home/firedrake

RUN echo "Build firedrake-{version}"
RUN curl -O {install_script_url}
"""

    def copy_file(file):
        return f"\nCOPY petsc/{file} /home/firedrake/{file}\n"

    sed = []
    if debug:
        sed.append(r"'s/\(--with-debugging=\)0/\11/g'")

    if mkl:
        mkl_patch_file = "petsc4py-mkl.patch"
        content += copy_file(mkl_patch_file)
        sed.append(r"'s/\({0}\/lib\)/\1\/intel64/g'")
        sed.append(r"'s/\(.*\)\(with directory(.petsc.):.*\)/"
                   r"\1\2\n\1\1check_output([\"git\", \"apply\", \"\/home\/firedrake\/" + mkl_patch_file + r"\"])/'")
        # for hpddm with mkl
        sed.append(r"'s/\(.*\)\(--C\)\(FLAGS=-I{}\/include\)\(.*\)/\1\2\3\4\n\1\2XX\3\4/'")

    install_slepc4py = ""
    remove_build_files = ""
    if SLEPC_IN_PETSC:
        slepc4py_file = "slepc4py-install.sh"
        content += copy_file(slepc4py_file)
        install_slepc4py = f"bash /home/firedrake/{slepc4py_file}"
        if not debug:
            remove_file = "remove_build_files.py"
            content += copy_file(remove_file)
            remove_build_files = f"python /home/firedrake/{remove_file}"
    else:
        # for install slepc with hpddm if we install slepc by firedrake.
        sed.append(r"'s/\(check_call(\[python, \"\.\/configure\"\)\(\])\)/\1, \"--download-hpddm\"\2/g'")

    if len(sed) > 0:
        sed = " \\\n    ".join([" ".join(["-e", _]) for _ in sed])

        content += f"""
# Modify firedrake-install file for debug/mkl/hpddm
RUN bash -c "sed -i.bak \\
    {sed} \\
    firedrake-install"
"""

    def concat(cmd, last=False, indent=1):
        if cmd:
            return ("\n" + " "*indent*4 + cmd + (" && \\" if not last else ""))
        else:
            return ""

    activate = "source /home/firedrake/firedrake/bin/activate"

    content += f"""
ARG PETSC_CONFIGURE_OPTIONS="{petsc_opts}"

RUN bash -c "python3 firedrake-install {firedrake_opts} && \\
    {activate} && \\{concat(install_slepc4py)}{concat(remove_build_files)}
    {clean_pip_cached_cmd}"

RUN bash -c "\\
    {activate} && \\
    pip install jupyterlab ipyparallel ipywidgets \\
                mpltools meshio gmsh scipy pyyaml pandas && \\
    {clean_pip_cached_cmd}"

ENV OMP_NUM_THREADS=1
ENV PATH=/home/firedrake/firedrake/bin:$PATH

CMD /home/firedrake/firedrake/bin/jupyter-lab --ip 0.0.0.0 --no-browser --allow-root
"""

    return content


def generate_bash_inner(int_type, complex, debug, mkl, path, filename):
    version = get_version_string(int_type, complex, debug, mkl)
    content = get_bash_content(int_type, complex, debug, mkl)
    if not os.path.exists(path):
        os.makedirs(path)
    fullname = os.path.join(path, f"{filename}-{version}.sh")
    with open(fullname, "w") as f:
        f.write(content)
    print(f"Generate {fullname} done!")


def generate_dockerfile_inner(int_type, complex, debug, mkl, path, filename):
    version = get_version_string(int_type, complex, debug, mkl)
    content = get_dockerfile_content(int_type, complex, debug, mkl)
    if not os.path.exists(path):
        os.makedirs(path)
    fullname = os.path.join(path, ".".join([filename, version]))
    with open(fullname, "w") as f:
        f.write(content)
    print(f"Generate {fullname} done!")


def generate_all(mkl, path, filename, sh):
    for complex in [False, True]:
        for int_type in ["int32", "int64"]:
            for debug in [False, True]:
                if sh:
                    generate_bash_inner(int_type, complex, debug, mkl, path, filename)
                else:
                    generate_dockerfile_inner(int_type, complex, debug, mkl, path, filename)


CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


@click.group(name='build', context_settings=CONTEXT_SETTINGS)
def cli_build():
    """Commands related to build docker image"""
    pass


@cli_build.command(name="gen", help="Generate docker files")
@click.option(
    "--int-type",
    type=click.Choice(["int32", "int64"]),
    default="int32",
    required=False,
    help="int type for the build",
)
@click.option(
    "-c", "-complex", "--complex",
    is_flag=True,
    default=False,
    required=False,
    help="build complex mode",
)
@click.option(
    "-d", "--debug",
    is_flag=True,
    default=False,
    required=False,
    help="build debug version",
)
@click.option(
    "-m", "--mkl",
    is_flag=True,
    default=False,
    required=False,
    help="build with MKL",
)
@click.option(
    "-f", "--filename",
    default=None,
    required=False,
    help="output the docker file",
)
@click.option(
    "-p", "--path",
    default="generate",
    required=False,
    help="output the docker file",
)
@click.option(
    "-a", "--all",
    is_flag=True,
    default=False,
    required=False,
    help="generate for all versions",
)
@click.option(
    "-s", "--sh",
    is_flag=True,
    default=False,
    required=False,
    help="generate bash script",
)
@click.option(
    "--sip", "--slepc-in-petsc",
    is_flag=True,
    default=True,
    required=False,
    help="Install slepc with petsc, otherwise with firedrake"
)
def generate_dockerfile(int_type, complex, debug, mkl, filename, path, all, sh, sip):
    SLEPC_IN_PETSC = sip
    if filename is None:
        filename = "Dockerfile" if not sh else "firedrake"
    if not all:
        if sh:
            generate_bash_inner(int_type, complex, debug, mkl, path, filename)
        else:
            generate_dockerfile_inner(int_type, complex, debug, mkl, path, filename)
    else:
        generate_all(mkl, path, filename, sh)


# TODO:
# def build_images():
#     if build_env:
#         build_docker_image("Dockerfile.env", tag="lrtfm/firedrake-env")
#
#     build_docker_image(fullname, tag=f"lrtfm/firedrake-{version}")

# def build_docker_image(fullname, tag, push):
#     common_args = "--network host"
#     cmd = f"docker build {common_args} -f {fullname} --tag {tag} ."
#


if __name__ == "__main__":
    cli_build()
    # generate_dockerfile()
